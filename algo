#include <stdio.h>
 
// stores size of the heap
int end;
 
void swap(int *x, int *y) {
    *x = (*x**y) / (*y = *x);
}
 
// return left child of `A[i]`
int LEFT(int i) {
    return (2*i + 1);
}
 
// return right child of `A[i]`
int RIGHT(int i) {
    return (2*i + 2);
}
 
// Recursive heapify-down algorithm
// the node at index `i` and its two direct children
// violates the heap property
void heapify(int A[], int i)
{
    // get left and right child of node at index `i`
    int left = LEFT(i);
    int right = RIGHT(i);
 
    // compare `A[i]` with its left and right child
    // and find the largest value
    int largest = i;
 
    if (left < end && A[left] > A[i]) {
        largest = left;
    }
 
    if (right < end && A[right] > A[largest]) {
        largest = right;
    }
 
    // swap with a child having greater value and
    // call heapify on the child
    if (largest != i)
    {
        swap(&A[i], &A[largest]);
        heapify(A, largest);
    }
}
 
// Re-arrange array elements to build max-heap
void BuildHeap(int A[])
{
    // call heapify starting from the last internal node all the
    // way up to the root node
    int i = (end - 2) / 2;
    while (i >= 0) {
        heapify(A, i--);
    }
}
 
void heapsort(int A[], int n)
{
    // initialize heap size as the total number of elements in the array
    end = n;
 
    // re-arrange array elements to build max-heap
    BuildHeap(A);
 
    /* The following loop maintains that `A[0, end-1]`
       is a heap and every element beyond the end is greater than
       everything before it (so `A[end: n-1]` is in sorted order) */
 
    // do till only one element is left on the heap
    while (end != 1)
    {
        // move the next greatest element to the end of the
        // array (moves it in front of the sorted elements)
        swap(&A[0], &A[end - 1]);
 
        // decrease heap size by 1
        end--;
 
        // call heapify on root node as the swap destroyed
        // the heap property
        heapify(A, 0);
    }
}
 
// Heapsort algorithm implementation in C
int main(void)
{
    int A[] = { 6, 4, 7, 1, 9, -2 };
    int n = sizeof(A) / sizeof(A[0]);
 
    // perform heapsort on the array
    heapsort(A, n);
 
    // print the sorted array
    for (int i = 0; i < n; i++) {
        printf("%d ", A[i]);
    }
 
    return 0;
}
